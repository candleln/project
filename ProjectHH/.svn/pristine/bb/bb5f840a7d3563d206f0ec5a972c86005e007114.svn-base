package com.projecthh.crm.consulting.controller;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.projecthh.common.CommandMap;
import com.projecthh.common.PageMaker;
import com.projecthh.crm.consulting.service.ConsultingService;
import com.projecthh.crm.consulting.vo.ConsultingVO;

@Controller
public class ConsultingController {
	Logger log = Logger.getLogger(this.getClass());

	@Resource(name = "consultingService")
	private ConsultingService consultingService;
	
	@RequestMapping(value = "/consultingList")
	public String selectConsultingList() throws Exception {	
		return "/crm/CONSULTING/CONLIS01";
	}
	
	@ResponseBody
	@RequestMapping(value = "/consultingSearch")
	public Map<String, Object> selectConsultingList(HttpServletRequest request) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("category", request.getParameter("category"));
		map.put("fromDate", request.getParameter("fromDate"));
		map.put("toDate", request.getParameter("toDate"));
		map.put("search", request.getParameter("search"));
		
		int startPage = 0;
		int page = 1;
		if (request.getParameter("page") != "" || request.getParameter("page") != null) {
			page = Integer.parseInt(request.getParameter("page"));
			startPage = (page - 1) * 10;
		}
		map.put("page", startPage);
		
		ArrayList<ConsultingVO> list  = consultingService.searchConsulting(map);

		PageMaker pm = new PageMaker();	
		pm.setTotalCount(consultingService.searchConsultingCount(map), page);
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("searchList", list);
		resultMap.put("page", pm);
		return resultMap;	
	}
	
	@RequestMapping(value = "/consultingDetail")
	public String selectConsulting(@RequestParam("no") String no, Model model, ConsultingVO vo) throws Exception {	
		vo = consultingService.selectConsulting(no);
		model.addAttribute("vo", vo);
		return "/crm/CONSULTING/CONDET01";
	}
	
	@RequestMapping(value = "/consultingUpdate")
	public String updateClient(CommandMap commandMap, HttpSession session, HttpServletRequest request) throws Exception {
		session = request.getSession();
		commandMap.put("employee_code", session.getAttribute("employee_code"));
		consultingService.updateConsulting(commandMap.getMap());
		return "redirect:/consultingDetail?no="+commandMap.get("consulting_no");
	}
	
	@RequestMapping(value = "/consultingDelete")
	public String deleteClient(@RequestParam("no") String no) throws Exception {
		consultingService.deleteConsulting(no);
		return "redirect:/consultingList";
	}
	
	@RequestMapping(value = "/consultingInsertForm")
	public String insertConsulting() throws Exception {	
		return "/crm/CONSULTING/CONINS01";
	}
	
	@RequestMapping(value = "/consultingInsert")
	public String insertConsulting(CommandMap commandMap, HttpSession session, HttpServletRequest request, MultipartFile file) throws Exception {
		session = request.getSession();
		commandMap.put("employee_code", session.getAttribute("employee_code"));
		commandMap.put("file", fileUp(request, file));
		consultingService.insertConsulting(commandMap.getMap());
		return "redirect:/consultingDetail?no=" + commandMap.get("consulting_no");
	}
	
	public String fileUp(HttpServletRequest request, @RequestParam("file") MultipartFile file) throws Exception {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		String today = sdf.format(new Date());
		String saveFileName = today + file.getOriginalFilename();
		String path = request.getSession().getServletContext().getRealPath("");
		File f = new File(path + "file/" + saveFileName);
		System.out.println("path" + path);
		file.transferTo(f);
		return saveFileName;
	}
}