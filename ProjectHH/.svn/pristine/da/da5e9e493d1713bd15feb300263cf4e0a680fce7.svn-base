package com.projecthh.company.user.controller;

import java.util.ArrayList;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.projecthh.common.AuthKeyCreator;
import com.projecthh.common.MailUtils;
import com.projecthh.company.notice.vo.NoticeVO;
import com.projecthh.company.qna.vo.QnaDTO;
import com.projecthh.company.user.service.UserService;
import com.projecthh.company.user.vo.UserVO;

@Controller
public class UserController {

	Logger log = Logger.getLogger(this.getClass());

	@Resource(name = "userService")
	private UserService userService;

	// 로그인페이지
	@RequestMapping(value = "ulogin")
	public ModelAndView userLogin(HttpServletRequest request, UserVO vo, HttpSession session) throws Exception {
		ModelAndView mv = new ModelAndView("/company/USER/USELOG01");
		
		//로그인 상태로 로그인 페이지로 들어갈경우
		session = request.getSession();
		if (session.getAttribute("set_id") != null || session.getAttribute("user_type") != null) {
			return new ModelAndView("redirect:main");
		}

		//로그인시에 들어오는 경로
		if (request.getParameter("id") != null) {
			vo.setId(request.getParameter("id"));
			vo.setPw(request.getParameter("pw"));
			//세션에 남기는 아이디값
			String userid = request.getParameter("id");
			vo = userService.login(vo);
			if (vo != null) {
				if (vo.getGrant().equals("5")) {
					// 관리자
					session.setAttribute("manager", "manger");
					session.setAttribute("set_id", userid);
					// P 개인
				} else if (request.getParameter("user_type").equals("P")) {
					session.setAttribute("user_type", "Ptype");
					session.setAttribute("set_id", userid);
					// G 비회원
				} else if (request.getParameter("user_type").equals("G")) {
					session.setAttribute("user_type", "Gtype");
					session.setAttribute("set_id", request.getParameter("id"));
				}
				// State N 일경우
				if (vo.getState().equals("N")) {
					String id = vo.getId();
					//signInConfirm 쪽으로 id값 추가
					return new ModelAndView("redirect:signInConfirm?userid=" + id + "");
				}
				// 로그인 성공
				return new ModelAndView("redirect:main");
			}
			// 로그인 실패
			return new ModelAndView("redirect:ulogin");
		}
		return mv;
	}

	@RequestMapping(value = "userSignIn")
	public String userSignIn() throws Exception {
		return "/company/USER/USESIG01";
	}
	
	@ResponseBody
	@RequestMapping(value = "/idCheck")
	public Map<String, Object> checkID(@RequestParam("id") String id, Map<String, Object> map) throws Exception {
		int idCheck = 0;
		idCheck = userService.checkID(id);
		map.put("idCheck", idCheck);
		return map;
	}
	
	@RequestMapping(value = "/signInAction")
	public String insertUser(Model model, UserVO vo, HttpServletRequest request) throws Exception {
		String authKey = new AuthKeyCreator().getKey(20);
		vo.setId(request.getParameter("id"));
		vo.setName(request.getParameter("name"));
		vo.setPw(request.getParameter("pw"));
		vo.setAddress(request.getParameter("address"));
		vo.setTel(request.getParameter("tel"));
		vo.setAuthKey(authKey);
		userService.insertUser(vo);

		model.addAttribute("id", vo.getId());

		sendMail(vo.getId(), authKey);
		return "redirect:/signInConfirm";
	}

	@RequestMapping(value = "/signInConfirm")
	public String confirmSignIn(Model model, HttpServletRequest request, Map<String, Object> map) throws Exception {
		String authKey = request.getParameter("authKey");
		String id = request.getParameter("id");
		map.put("authKey", authKey);
		map.put("id", id);

		model.addAttribute("checkExpr", userService.selectUser(map));

		userService.updateUserState(map);
		model.addAttribute("user", map);
		return "/company/USER/USESIG02";
	}

	@RequestMapping(value = "/reSignInConfirm")
	public String confirmSignIn(Map<String, Object> map, HttpServletRequest request) throws Exception {
		String id = request.getParameter("id");
		String newAuthKey = new AuthKeyCreator().getKey(20);

		map.put("id", id);
		map.put("newAuthKey", newAuthKey);

		userService.updateAuthKey(map);

		sendMail(id, newAuthKey);
		return "redirect:/signInConfirm";
	}

	@Autowired
	private JavaMailSender mailSender;

	public MailUtils sendMail(String id, String authKey) throws Exception {
		MailUtils sendMail = new MailUtils(mailSender);

		sendMail.setSubject("HH 회원가입 이메일 인증");
		sendMail.setText(new StringBuffer().append("<h1>[이메일 인증]</h1>").append("<p>링크를 클릭하시면 이메일 인증이 완료됩니다.</p>")
				.append("<a href='http://localhost:8080/signInConfirm?id=" + id + "&authKey=" + authKey)
				.append("'target='_blenk'>이메일 인증 확인</a>").toString());
		sendMail.setFrom("hellhoundstest@gmail.com", "관리자");
		sendMail.setTo(id);
		sendMail.send();
		return sendMail;
	}

	// 로그아웃
	@RequestMapping(value = "/logout")
	public ModelAndView logout(HttpSession session, HttpServletRequest request) throws Exception {
		session = request.getSession();
		if (session.getAttribute("user_type") != null) {
			//세션 user type삭제
			session.removeAttribute("user_type");
		}
		if (session.getAttribute("set_id") != null) {
			//세션 id삭제
			session.removeAttribute("set_id");
		}
		if (session.getAttribute("manager") != null) {
			//세션 manager삭제
			session.removeAttribute("manager");
		}
		return new ModelAndView("redirect:main");
	}

	@RequestMapping(value = "userInfo")
	public ModelAndView qnaDetail(HttpServletRequest request, HttpSession session) throws Exception {
		ModelAndView mv = new ModelAndView("/company/USER/USEINF01");

		String no = request.getParameter("no");

		UserVO dto = userService.userInfo(no);

		/* String Writer = (String) session.getAttribute("set_id"); */

		mv.addObject("dto", dto);

		return mv;
	}

	@RequestMapping(value = "infedit")
	public ModelAndView qnaedit(HttpServletRequest request) throws Exception {
		ModelAndView mv = new ModelAndView("/company/USER/INFEDI01");
		UserVO dto = new UserVO();
		String no = request.getParameter("no");
		dto = userService.userInfo(no);

		mv.addObject("dto", dto);
		return mv;
	}

	@RequestMapping(value = "infupdate")
	public ModelAndView qnaEdit(HttpServletRequest request) throws Exception {
		request.setCharacterEncoding("UTF-8");
		UserVO dto = new UserVO();

		dto.setUser_no(Integer.parseInt(request.getParameter("user_no")));
		dto.setName(request.getParameter("name"));
		dto.setAddress(request.getParameter("addr"));
		dto.setTel(request.getParameter("tel"));

		userService.infoupdate(dto);
		return new ModelAndView("redirect:main");
	}

	// 임시
	@RequestMapping(value = "main")
	public ModelAndView main() throws Exception {
		ModelAndView mv = new ModelAndView("/company/MAIN/main");
		ArrayList<NoticeVO> nvo = userService.notice();
		ArrayList<QnaDTO> qvo = userService.qna();
		mv.addObject("notice", nvo);
		mv.addObject("qna", qvo);
		return mv;
	}

	@RequestMapping(value = "usesig")
	public String usesig() {
		return "/company/USER/USESIG01";
	}

	@RequestMapping(value = "userfind")
	public String find() {
		return "/company/USER/USEFIN01";
	}
}